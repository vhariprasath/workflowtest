name: Plutus SQL Deploy Pipeline

on:
  workflow_dispatch:
    inputs:
      Environment:
        description: "Choose env"
        type: choice
        options:
            - DEV
            - UAT
            - PRD

run-name: PlutusSQL-Release-${{inputs.Environment}}-${{ github.run_number }}
permissions:
  id-token: write
  contents: write
jobs:
  Deploy:
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
           token: ${{ secrets.GITHUB_TOKEN }}
           clean: true


      - name: Run SQL scripts from shared path
        shell: cmd
        env:
          DATABASE_SERVER: DUE2SQL04\AP1DEV
          DATABASE_NAME: master
        run: |
          for %%F in ("inputs\*.sql") do (
            echo Executing Script: %%F
          )
          
      # - name: Create timestamp folder and copy inputs
      #   id: datetime
      #   run: |
      #           $datetime = Get-Date -Format "yyyy-MM-dd_HH-mm-ss"
      #           New-Item -Path $datetime -ItemType Directory -Force
      #           Copy-Item -Path "inputs\*" -Destination $datetime -Recurse -Force
      #           echo "result=$datetime" >> $GITHUB_OUTPUT
      #           Remove-Item -Path ".github/workflows/pipeline.yaml" -Force
      
      - name: Create timestamp folder and copy inputs
        run: |
                #git fetch origin logs/${{ github.ref_name }}
                #$branchExists = git ls-remote --heads origin logs/workflow-dev

                # if ($branchExists) {
                #     echo "exists"
                git checkout logs/${{ github.ref_name }}
                $datetime = Get-Date -Format "yyyy-MM-dd_HH-mm-ss"
                New-Item -Path $datetime -ItemType Directory -Force
                Copy-Item -Path "inputs\*" -Destination $datetime -Recurse -Force
                echo "result=$datetime" >> $GITHUB_OUTPUT
                
                Remove-Item -Path ".github" -Recurse -Force
                Remove-Item -Path "inputs" -Recurse -Force


                git add .
                git status
                git commit -m "Archived inputs to $datetime by $env:GITHUB_ACTOR"
                git push origin logs/${{ github.ref_name }}
                git checkout ${{ github.ref_name }}
                git status

                # } else {
                #     echo "not exisits"
                #     git checkout -b logs/workflow-dev
                # }

              
      # - name: Add and push files to logs/dev
      #   run: |
      #           git add .
      #           git reset .github/workflows/pipeline.yaml
      #           git status
      #           git commit -m "Archived inputs to $datetime by $env:GITHUB_ACTOR"
      #           git push origin logs/${{ github.ref_name }}
      
      - name: Cleanup inputs folder
        run: |
                      Write-Host "Cleaning up inputs folder..."
                      Get-ChildItem -Path "inputs" -Recurse -Force | Remove-Item -Recurse -Force
                      New-Item -ItemType Directory -Path "inputs" -Force
        
      - name: Commit cleanup with actor identity
        # env:
        #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
                      $username = "${{ github.actor }}"
                      $email = "$runner@github.com"
                      git config --global user.name "$username"
                      git config --global user.email "$email"
                      git add inputs
                      git commit -m "inputs folder cleaned up after workflow"
                      git push -f origin "${{ github.ref_name }}"
              
      # - name: Run Powershell Script
      #   run: |
      #     # Write your power shell commands here.

      #       ##Create a New Directory 

      #       $FolderName = (Get-Date).tostring("dd-MM-yyyy-hh-mm-ss") 

      #       New-Item -ItemType Directory -Path "\\pue2dvo01\AzureDevOpsRelease\Plutus\${{inputs.Environment}}\ARCHIVE" -Name $FolderName

      #       Write-Output "New Archive Folder will be: \\pue2dvo01\AzureDevOpsRelease\Plutus\${{inputs.Environment}}\ARCHIVE\$FolderName"


      #       #$acl = Get-Acl '\\pue2dvo01\AzureDevOpsRelease\Plutus\${{inputs.Environment}}\ARCHIVE\$FolderName'

      #       #$acl.SetAccessRuleProtection($false, $true)

      #       #$ace = "domain users","Modify", "ContainerInherit,ObjectInherit","None","Allow"

      #       #$objACE = New-Object System.Security.AccessControl.FileSystemAccessRule($ace)

      #       #$acl.AddAccessRule($objACE)

      #       #Set-ACL -Path "\\pue2dvo01\AzureDevOpsRelease\Plutus\${{inputs.Environment}}\ARCHIVE\$FolderName" -AclObject $acl

      #       Write-Output "New Archive Folder will be: \\pue2dvo01\AzureDevOpsRelease\Plutus\${{inputs.Environment}}\ARCHIVE\$FolderName"

      #       Move-Item -Path "\\pue2dvo01\AzureDevOpsRelease\Plutus\${{inputs.Environment}}\*.*" -Destination "\\pue2dvo01\AzureDevOpsRelease\Plutus\${{inputs.Environment}}\ARCHIVE\$FolderName"


      #       # Use the environment variables input below to pass secret variables to this script.
     
