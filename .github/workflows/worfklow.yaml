name: Plutus SQL Deploy Pipeline

on:
  workflow_dispatch:
    inputs:
      Environment:
        description: "Choose env"
        type: choice
        options:
            - DEV
            - UAT
            - PRD

run-name: PlutusSQL-Release-${{inputs.Environment}}-${{ github.run_number }}
permissions:
  id-token: write
  contents: write
jobs:
  Deploy:
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
           token: ${{ secrets.GITHUB_TOKEN }}
           clean: true


      - name: Run SQL scripts from shared path
        shell: cmd
        env:
          DATABASE_SERVER: DUE2SQL04\AP1DEV
          DATABASE_NAME: master
        run: |
          for %%F in ("inputs\*.sql") do (
            echo Executing Script: %%F
          )
      
      - name: Create timestamp folder and copy inputs
        run: |
                # Set Git user based on the GitHub actor
                $username = "${{ github.actor }}"
                $email = "$username@github.com"
                git config --global user.name "$username"
                git config --global user.email "$email"
                
                # Switch to the logs branch
                #git checkout logs/${{ github.ref_name }}
                $branchExists = git ls-remote --heads origin logs/master

                if ($branchExists) {

                    git checkout -B logs/master origin/logs/master
                 
                } else {
                    # Create branch from current master (or another base)
                    git checkout -b logs/master
                }
                
                # Create a timestamped folder
                $datetime = Get-Date -Format "yyyy-MM-dd_HH-mm-ss"
                New-Item -Path $datetime -ItemType Directory -Force
                
                # Copy contents from 'inputs' to the new timestamped folder
                Copy-Item -Path "inputs\*" -Destination $datetime -Recurse -Force
                
                # Output the result path to GitHub Actions
                "result=$datetime" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
                
                # Optionally remove inputs and .github if needed
                # Remove-Item -Path ".github" -Recurse -Force
                # Remove-Item -Path "inputs" -Recurse -Force
                
                # Stage, commit, and push changes to the logs branch
                git add .
                git status
                git commit -m "Archived inputs to $datetime by $env:GITHUB_ACTOR"
                git push origin logs/${{ github.ref_name }}
                
                # Switch back to the original working branch
                git checkout ${{ github.ref_name }}
                git status

      - name: Cleanup
        if: always()
        run: Remove-Item * -Recurse -Force
        

      
     
      
